4-1 프로그래밍의 꽃, 함수

함수(function)
= 동작해야 할 목적대로 여러 개의 명령을 묶는 것

함수의 선언
*	function 함수명() {
	    명령
	}
- 함수 선언 소스는 어디에 넣어도 상관없음
- js를 해석할 때 변수 선언이나 함수 선언 부분을 가장 먼저 해석하므로, 보통 함수 선언을 실행 소스보다 앞에 넣음

함수의 호출
*	함수명()

매개변수(parameter)
= 함수를 선언할 때 외부에서 값을 받는 변수
- 함수 이름 옆의 소괄호 안에 매개변수 이름을 넣음
- 매개변수는 선언된 함수에서만 사용하고, 함수에 여러 개의 매개변수가 필요할 시 쉼표(,)로 나열
- ES6부터는 함수 선언 시 매개변수의 기본값을 지정할 수 있음
	- 인수가 부족할 시 매개변수 값은 undefined가 되어, 결괏값은 NaN

인수(argument)
= 매개변수가 있는 함수를 호출할 때, 실제로 값을 넣어 넘겨주는 것
- 매개변수와 인수를 통틀어서 '인자'라고 부름

return 문
= 함수의 실행 결과를 실행한 시점으로 넘겨주는 것 (함수의 결괏값을 반환)
= return 다음에 넘겨줄 값이나 변수를 지정



4-2 변수의 유효 범위, 스코프

스코프(scope)
= 선언한 변수의 적용 범위
	- 함수 레벨 스코프 : var 변수
	- 블록 레벨 스코프 : let 변수, const 변수

지역 스코프
= 변수를 특정 영역에서만 사용

전역 스코프
= 프로그램의 시작 부분에서 변수를 선언하면 프로그램 전체에서 사용할 수 있는 스코프
= 전역 변수 : 전역 스코프를 가지는 변수
- 함수에서 변수를 선언 할 때 변수 이름의 앞에 var 예약어를 붙이지 않으면, 전역 변수로 인식
- 가능하다면 전역 변수를 사용하지 않는 것이 가장 좋음

블록 레벨 스코프
= 블록( { } )별로 변수의 유효 범위가 결정되는 것
- let 이나 const 변수는 기본적으로 변수가 선언된 블록 안에서만 유효함 (= 블록 변수)

js 변수 사용법
1.  var 변수보다 let, const 변수를 사용
	- var 변수는 재선언해도 오류가 없음
	- let 이나 const 변수는 호이스팅이 없음 (재선언 시 오류)
2.  전역 변수는 최소한으로 사용
	- 어디서든 값을 변경할 수 있으므로, 오류가 발생할 확률이 높음
	- 프로그램에서 값이 변하지 않는다면 const 변수로 선언하는 것이 좋음
3.  객체 선언은 const 변수를 사용
	- 프로그래밍 도중에 객체 자체가 바뀌지 않도록
	- 객체를 const로 선언해도 객체 안에 있는 프로퍼티는 얼마든지 수정 가능



4-3 이름 없이 사용하는 함수 표현식

콜백 함수(callback function)
= 다른 함수의 인수로 사용하는 함수
- 함수 안에 함수를 넣을 때 함수 이름 다음에 소괄호가 없음
	- 함수 이름 뒤에 소괄호를 넣으면, 함수를 실행하는 것

익명 함수
= 함수 이름이 없는 함수
- 주로 콜백 함수로 사용
1.  변수에 할당해서 사용
	- 변수에 저장된 함수는 함수 이름 대신 변수를 이용해서 함수를 실행 가능
	- 함수를 마치 하나의 값처럼 사용 가능
2.  즉시 실행 함수
	= 한 번만 실행하는 함수일 경우 함수를 정의하면서 동시에 실행
	- 소괄호 사이에 함수 정의(중괄호)와 인수(소괄호)를 입력하고, 마지막 소괄호(')') 다음에 세미콜론(;)을 붙임
*	( function() {
	  명령
	} (인수));

화살표 함수 (= 애로 펑션(arrow function))
= ES6부터는 => 표기법(화살표 표기법)을 사용해 함수를 좀 더 간단하게 선언 가능
*	(매개변수) => { 함수 내용 }
- 함수에서 실행할 명령이 한 줄 뿐이라면 중괄호( { } ) 생략 가능
- 그 한 줄 명령에 return 문이 포함되어 있다면, return도 생략 가능
1.  매개변수가 없을 때
	- 매개변수가 들어가는 소괄호 부분을 비워서 사용 / () => { 함수 내용 }
2.  매개변수가 1개일 때
	- 매개변수의 소괄호를 생략 가능 / 매개변수 => { 함수 내용 }



4-4 전개 구문

전개 구문(spread syntax)
= 값을 펼쳐 주는 구문
- 전개 연산자 : 3개의 마침표(...)를 이용
- 문자열, 배열, 객체처럼 여러 개의 값을 담고 있는 자료형에서 다른 정보는 필요 없고 그 안의 값만 꺼내 사용하려고 할 때 유용하게 사용
ex ) ...변수명

나머지 매개변수
= 함수를 선언하면서 나중에 몇 개의 인수를 받을지 알 수 없을 때, 전개 연산자(...)를 사용해서 매개변수를 만듦
- 인수의 일부분은 변수로 받고, 그 외에는 나머지 매개변수로 받을 수 있음
	- 이 때, 나머지 매개변수는 마지막에 써야 함



4-5 시간을 고려하는 타이머 함수

타이머 함수(timer function)
= 특정 시간이 되었을 때 함수를 실행하거나 특정 시간 동안 함수를 반복하기 위해서 시간을 재는 함수
- 실행할 함수와 시간을 지정하는 함수라서, 콜백 함수를 매개변수로 사용

setInterval() 함수
= 일정 시간마다 함수를 반복해서 실행하는 함수
= setInterval(콜백 함수, 시간);
	- 콜백 함수는 괄호 없이 사용해야 함
		- 콜백 함수를 직접 실행하는 것이 아니라, setInterval() 함수에서 인수로 사용하기 때문
	- 시간 단위는 [ms]

clearInterval() 함수
= setInterval() 함수로 시작한 타이머를 종료하는 함수 (반복 실행 멈추기)
= clearInterval(타이머);

setTimeout() 함수
= 지정한 시간이 지난 후에 콜백 함수를 실행 (특정 시간 이후에 실행)
= setTimeout(콜백 함수, 시간);



//////////

디버깅(debugging)
= 프로그램 소스를 순서대로 하나씩 진행해 보면서 오류를 찾아내는 것
- 개발자 메뉴(F12)의 소스에서 사용 가능