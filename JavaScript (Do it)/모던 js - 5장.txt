5-1 DOM과 DOM 트리

문서 객체 모델 (DOM; Document Object Model)
= js를 이용하여 웹 문서에 접근하고 제어할 수 있도록 객체를 사용해 웹 문서를 체계적으로 정리하는 방법
- 웹 문서를 하나의 객체로 정의하고, 웹 문서를 이루는 모든 요소도 각각 객체로 정의
- 각 객체마다 속성을 나타내는 프로퍼티(property)와 동작을 위한 메서드(method)가 있음

DOM 트리
= 웹 문서에 있는 요소들 간의 부모, 자식 관계를 계층 구조로 표시한 것
- 문서의 요소뿐만 아니라 각 요소에서 사용한 속성과 내용도 각 요소의 자식으로 표시



5-2 웹 요소에 접근하기

querySelector() 함수
= 1개의 웹 요소에만 접근할 때 사용하는 함수
= 기본형 : document.querySelector("선택자")
	- 특정 태그
	- #id명
	- .class명
	- 하위 선택자 (A B)
	- 자식 선택자 (A > B)
- 1개의 요소만 가져오기 때문에, 여러 개의 요소들이 적용 시 그 중에서 첫 번째 요소만 가져옴

querySelectorAll() 함수
= 여려 개의 웹 요소에 접근할 때 사용하는 함수
- id 선택자를 제외한 다른 선택자들은 문서에서 여러 번 사용할 수 있으므로 한꺼번에 여러 개의 요소에 접근 가능
= 기본형 : document.querySelectorAll("선택자")
- 클래스 선택자를 사용하면, 같은 클래스 이름을 사용하는 요소를 모두 가져와서 노드 리스트 형태로 저장
	- 노드 리스트에 저장된 요소들은 배열처럼 인덱스를 사용해서 접근
		ex ) document.querySelectorAll(".user")[2]

웹 요소의 내용 가져오기
= 요소.innerText : 웹 브라우저 창에 보이는 내용만 가져옴
= 요소.innerHTML : (안 보이는 내용 포함)태그와 내용을 함께 가져옴
= 요소.textContent : (안 보이는 내용 포함)소스에 있는 대로 가져옴

웹 요소의 내용 수정하기
= 기본형 : 요소.속성 = 내용
- 주로 const 변수로 웹 요소를 할당함



5-3 자바스크립트로 스타일 수정하기

CSS 속성에 접근하고 수정하기
= 기본형 : 요소.style.속성명
- CSS 속성 사용 시, js는 하이픈(-) 사용이 되지않아서 대신 뒷 단어의 첫 글자를 대문자로 사용 (카멜 표기법)
	ex ) document.querySelector("h1").style.backgroundColor = red

classList 프로퍼티
= 웹 요소의 class 스타일 정보를 담아두는 프로퍼티
	- 한 요소에 여러 개의 class 스타일을 적용 가능
	- classList를 사용해서 적용 중인 class 스타일을 제거/추가
= 요소.classList : 해당 요소애 적용된 클래스 스타일이 표시됨
= 요소.classList.add("클래스명") : 클래스 스타일 추가 (추가할 스타일은 미리 만들어져 있어야 함)
= 요소.classList.remove("클래스명") : 클래스 스타일 제거
= 요소.classList.toggle("클래스명") : 반복적으로 특정 클래스를 추가 및 삭제
	ex ) 클릭할 때 마다 스타일을 추가/제거



5-4 DOM에서 폼 다루기

폼(form)
= 웹 문서에서 사용자가 정보를 입력할 수 있게 만들어 놓은 웹 요소

폼 요소에 접근하고 값을 가져오는 방법
1.  id 또는 class 속성값을 사용해 폼 요소에 접근하기
	= 요소.value : 폼 요소 중 텍스트 필드나 이메일 필드에서 사용자가 입력한 값을 가져올 수 있음
2.  name 속성값을 사용해 폼 요소에 접근하기
	- <form> 태그부터 시작해서 원하는 폼 요소까지 계층을 따라가면서 name을 지정해야 함
		- <form> 태그뿐만 아니라 <form> 태그 안의 폼 요소에도 name 속성이 있어야 함
	= 기본형 : document.폼이름.요소이름
3.  폼 배열을 사용해 폼 요소에 접근하기
	- 폼 요소에 id나 class나 name 속성이 없다면, 폼 배열을 사용
	= 기본형 : document.fomrs
		document.forms[0].elements

선택 목록과 항목에 접근하기
= 선택 목록 : <select> 태그를 사용한 목록
	- <option> 태그를 사용해서 여러 개의 항목을 한꺼번에 지정한 후 목록을 펼쳐서 원하는 항목을 선택
1.  선택 목록에 접근하기
	= 기본형 : document.querySelector(선택자).options
	= selectedIndex 속성 : 사용자가 선택한 옵션의 인덱스 값
2.  알림 창에 선택한 항목 표시하기
	- 선택 메뉴에서 몇 번째 항목을 선택했는지는 selectedIndex 값을 보면 됨
	- 선택 목록에 함수를 연결할 때는 onchange 메서드를 사용

라디오 버튼과 체크 박스에 접근하기
- 라디오 버튼이나 체크 박스는 하나의 그룹 안에서 항목을 선택하므로, 그룹별로 같은 name 값을 사용
	- name 속성을 사용해서 접근
	- 같은 name 값을 가진 요소가 여러 개이므로 RadioNodeList 형태로 저장 됨
- 선택한 항목의 값은 value 속성에 저장
= checked 속성 : 선택하거나 선택하지 않거나, 논리형 값(true/false)으로 표현
	- 어떤 항목을 선택했는지 알고 싶으면 각 항목 중에서 checked 속성이 있는 것을 찾아야 함
	ex ) document.querySelector("input[name='mailing']:checked") - 라디오 버튼
	ex ) document.querySelectorAll("input[name='mailing']:checked") - 체크 박스