8-1 웹 브라우저의 최상위 객체, window

객체(object)
= 자료를 저장하고 처리하는 기본 단위
- js 프로그램에서 인식할 수 있는 모든 대상
- 복합 자료형 (객체 안에 숫자, 문자열 등 여러 가지 자료형이 포함됨)

내장 객체(built-in object)
= 미리 정의되어 있는 객체

window 객체
= 웹 브라우저의 내장 객체 중 모든 객체의 최상위 객체
	- 모든 객체를 포함하고 있는 가장 기본이 되는 객체

팝업 창 만들기
- 최근에는 사이트 디자인과 일관성을 유지하기 위해 레이어를 사용해 팝업 창을 만듦
- <div> 태그를 사용해서 본문에 팝업 창 형태를 만들어 놓고
	필요에 따라 팝업 창 내용을 화면에 표시하거나 감추는 방법을 사용
1.. 팝업 창 열기 - open() 메서드
= 기본형 : window.open(경로, 창 이름, 창 옵션);
	- 경로 : 팝업 창에 표시할 문서나 사이트의 경로/주소
	- 창 이름 : 팝업 창에 이름을 지정하면, 항상 지정한 창에 팝업 내용을 나타낼 수 있음.
		만약 이름을 지정하지 않으면 팝업 창이 계속 새로 나타남.
	- 창 옵션 : 팝업 창은 기본적으로 화면의 왼쪽 맨 위에 나타나는데, left 속성과 top 속성을
		사용해서 위치를 조절하거나 width 속성과 height 속성을 사용해 크기 지정 가능
	ex ) window.open("notice.html", "", "width=600 height=500 left=300 top=200");
2.. 팝업 창 닫기 - close() 메서드
- 내용의 아래쪽에 [닫기] 버튼이나 링크를 넣을 수 있음
= 기본형 : window.close();
	ex ) <button onclick="window.close()">닫기</button>
3.. 화면 중앙에 팝업 창 표시하기
- 팝업 창은 기본적으로 화면의 왼쪽 위에 나타나므로, 화면의 중앙에 배치하려면 약간의 계산이 필요
- screen 객체를 사용해 화면의 크기를 알아낸 후 팝업 창의 크기를 고려해서 화면의 중앙에 배치
	- screen.availWidth 프로퍼티와 screen.availHeight 프로퍼티를 사용
		= UI 영역을 제외한 내용 표시 영역의 높이
	ex ) let left = (screen.availWidth - popWidth) / 2;
	     let top = (screen.availHeight - popHeight) / 2;
	     window.open("notice.html", "이벤트팝업", `width = ${popWidth}
		height=${popHeight} left = ${left} top = ${top}`);

history 객체
= 웹 브라우저 창에서 [뒤로] 버튼이나 [앞으로] 버튼을 클릭하거나 주소 표시줄에 입력해서 돌아다녔던 사이트 주소가 array 배열에 저장되어 있음
- 보안 문제 때문에 웹 브라우저 창에 있는 웹 브라우저 히스토리는 읽기 전용
= length 프로퍼티 : 방문했던 사이트 개수
- 방문했던 URL 정보가 저장되므로, 방문했던 URL을 앞뒤로 이동하는 메서드 사용 가능
	- back() : history 목록에서 이전 페이지를 현재 화면에 불러옴
	- forward() : history 목록에서 다음 페이지를 현재 화면에 불러옴
	- go() : history 목록에서 현재 페이지를 기준으로 상대적인 위치에 있는 페이지를 현재 화면에 불러옴
		ex ) history.go(1)은 다음 페이지를, history.go(-1)은 이전 페이지를 불러옴

location 객체
= 웹 브라우저 창의 주소 표시줄과 관련
= 현재 문서의 URL 주소에 대한 정보를 가지고 있는데,
	이 정보를 편집하면 현재 웹 브라우저 창에 열릴 사이트나 문서를 지정할 수 있음
- 메서드
	- reload() : 새로고침 (현재 문서를 다시 불러옴)
	- replace() : 현재 문서의 URL을 지우고 다른 URL의 문서로 교체
		- 현재 문서의 주소에 새로운 주소를 대체해 웹 브라우저 창의 [뒤로] 버튼 비활성화 가능



8-2 Date 객체 활용하기

자바스크립트 객체의 인스턴스 만들기
= js의 내장 객체를 사용할 때는 개체의 프로퍼티와 메서드를 가진 새로운 객체를 만든 후,
	여기에 식별자를 붙여 프로그래밍에서 사용함
= 이렇게 내장 객체와 똑같은 모양으로 찍어내는 것을 '인스턴스(instance)'라고 함

Date 객체
= 날짜와 시간에 대한 정보를 조절할 수 있는 내장 객체
= 기본형 : new Date();
	ex ) let todat = new Date();
- 다른 설정 없이 현재 날짜와 시간을 사용해 인스턴스를 만들 때는 간단히 new라는 예약어만 사용
- 특정한 날짜를 저장한 Date 객체를 만들려면, Date 다음의 소괄호 안에 날짜 정보를 입력
	ex ) new Date("2025-02-25"); 또는 new Date(2025, 2, 25);
	- 연도와 월, 일을 인수로 사용할 경우 월(month)의 값은 0부터 시작한다는 것에 주의
- 시간 정보까지 함께 지정하려면, 날짜 다음에 대문자 T를 추가한 후 그 뒤에 시간을 입력
	ex ) new Date("2025-02-25T18:00:00");
= 날짜와 시간 입력 방식
	1.  YYYY-MM-DD (YYYY나 YYYY-MM 사용 가능)
	2.  YYYY-MM-DDTHH:MM:SS (UTC(국제 표준시)로 표시하려면 맨 끝에 Z를 붙임)
	3.  MM/DD/YYYY
	4.  전체 형식 (월과 요일은 전체 이름이나 줄여쓴 이름을 모두 사용 가능)
		ex ) new Date("Thu Aug 17 2022 15:00:41 GMT+0900 (대한민국 표준시)")

Date 객체의 메서드
- 메서드 이름 앞에 get이 붙어 있으면, 날짜나 시간을 가져오는 메서드
	- getFullYear() : 현지 시간을 기준으로 연도 값을 가져옴
	- getMonth() : 월 값을 가져옴 (0~11 사이의 숫자가 반환, 0은 1월이고 11은 12월)
	- getDate() : 일 값을 가져옴 (1~31 사이의 숫자로 반환)
	- getDay() : 요일 값을 가져옴 (0~6 사이의 숫자가 반환, 0은 일요일이고 6은 토요일)
	- getTime() : 1970년 1월 1일 00:00 이후의 시간을 밀리초[ms]로 표시
	- getHours() : 시 값을 가져옴 (0~23 사이의 숫자로 반환)
	- getMinutes() : 분 값을 가져옴 (0~59 사이의 숫자로 반환)
	- getSeconds() : 초 값을 가져옴 (0~59 사이의 숫자로 반환)
	- getMilliSeconds() : 밀리초 값을 가져옴 (0~999 사이의 숫자로 반환)
- 메서드 이름 앞에 set이 붙어 있으면, 날짜나 시간 정보를 설정하는 메서드
	- setFullYear() : 현지 시간을 기준으로 연도를 설정
	- setMonth() : 현지 시간을 기준으로 월을 설정
	- setDate() : 현지 시간을 기준으로 일을 설정
	- setTime() : 1970년 1월 1일 00:00 이후의 시간을 밀리초[ms]로 설정
	- setHours() : 현지 시간을 기준으로 시를 설정
	- setMinutes() : 현지 시간을 기준으로 분을 설정
	- setSeconds() : 현지 시간을 기준으로 초를 설정
	- setMilliSeconds() : 현지 시간을 기준으로 밀리초를 설정
- 메서드 이름 앞에 to가 붙어 있으면, 국제 표준 형식으로 된 날짜 표시를 다른 형식으로 바꿔주는 메서드
	- toUTCString() : '요일 일 월 연도 시:분:초 UTC' 형식으로 표시
	- toLocaleString() : '월/일/년도 시:분:초' 형식으로 표시
	- toString() : '요일 월 날짜 시:분:초 UTC+대한민국 표준시' 형식으로 표시
	- toDateString() : Date에서 날짜 부분만 표시
	- toTimeString() : Date에서 시간 부분만 표시



8-3 Math 객체 활용하기

Math 객체
= 수학적인 계산관 관련된 메서드들이 많이 포함되어 있음
- 따로 인스턴스를 만들지 않으므로, Math라는 예약어 뒤에 사용할 프로퍼티나 메서드를 직접 사용
- 프로퍼티
	- E : 오일러 상수
	- PI : 원주율(파이)
	- SQRT2 : 루트2
	- LN10 : ln(10)
	- LOG2E : log_2(e)
	- LOG10E : log(e)
- 메서드
	- abs() : 절댓값
	- ceil() : 소수점 이하를 올림
	- floor() : 소수점 이하를 버림
	- round() : 소수넘 이하를 반올림
	- log() : 로그값
	- max() : 최댓값
	- min() : 최솟값
	- random() : 0~1 사이의 무작위 수를 반환

소수점 이하 처리하기
1.. 소수점 이하 버리거나 올리기
- Math.ceil() : 소수점 이하를 올림
- Math.floor() : 소수점 이하를 버림
- Math.round() : 소수넘 이하를 반올림
2.. 소수점 자릿수 지정하기
- toFixed() 메서드
	- 소괄호 안에는 화면에 표시할 소수점 자릿수를 지정
	ex ) (Math.PI).toFixed(3);  // 3.142

무작위 수 추출하기 - random() 메서드
= random() : 0과 1 사이의 무작위 수를 반환하는 함수
= Math.random()