6-1 이벤트 알아보기

이벤트(event)
= 웹 브라우저나 사용자가 실행하는 어떤 동작
- 사용자가 웹 문서 영역을 벗어나서 클릭하는 행위는 이벤트가 아님

문서 로딩 이벤트
- abort : 웹 문서가 완전히 로딩되기 전에 불러오기를 멈추었을 때
- error : 문서가 정확히 로딩되지 않았을 때
- load : 문서 로딩이 끝났을 때
- resize : 문서 화면의 크기가 바뀌었을 때
- scroll : 문서 화면이 스크롤 되었을 때
- unload : 문서를 벗어났을 때

마우스 이벤트
- click
- dblclick : 더블클릭
- mousedown : 요소에서 마우스 버튼을 눌렀을 때
- mousemove : 요소에서 마우스 포인터를 움직일 때
- mouseover : 마우스 포인터를 요소 위로 옮길 때
- mouseout : 마우스 포인터가 요소를 벗어날 때
- mouseup : 요소 위에 올려놓은 마우스 버튼에서 손을 뗄 때

키보드 이벤트
- keydown : 키를 누르는 동안
- keypress : 키를 눌렀을 때
- keyup : 키에서 손을 뗄 때

폼 이벤트
- blur : 폼 요소에 포커스를 잃었을 때
- change : 목록이나 체크 상태 등이 변경되었을 때 (<input>, <select>, <textarea> 태그에서 사용)
- focus : 폼 요소에 포커스를 놓았을 때 (<label>, <select>, <textarea>, <button> 태그에서 사용)
- reset : 폼이 리셋되었을 때
- submit : [submit] 버튼을 눌렀을 때



6-2 이벤트 처리하기

이벤트 처리기 (= 이벤트 핸들러(event handler))
= 이벤트가 발생하면 그에 따른 연결 동작으로 이벤트를 처리하는 것

1.  HTML 태그에 연결하기
= 이벤트가 발생한 HTML 태그에 직접 함수를 연결
*	<태그 on이벤트명 = "함수명">
- HTML 태그에 스크립트를 함께 사용하기 때문에 변경이 있을 경우 HTML 소스도 함께 수정

2.  웹 요소에 직접 함수 연결하기
- 스크립트 소스를 변경해도 HTML 마크업에는 영향을 주지 않게 하려면
	이벤트 처리기도 스크립트 소스에서 처리하는 것이 좋음
*	요소.on이벤트명 = 함수;
- 함수를 미리 만들어 두었다면 간단히 함수 이름만 지정해도 됨
	- 이 때 실행할 함수 이름 뒤에 소괄호(())를 사용하지 않음
- 웹 요소에서 'on이벤트명' 프로퍼티를 하나만 사용할 수 있기 때문에
	한 요소에 여러 개의 이벤트 시 가장 마지막에 사용한 프로퍼티만 적용됨

3.  이벤트 리스너
- 더 많이 사용하는 방법은 addEventListener() 함수를 이용하는 것
*	요소.addEventListener("이벤트", 함수, 캡처 여부);
	- 이벤트 : 이벤트 유형 / on을 붙이지 않고 이벤트 이름을 그대로 사용
	- 함수 : 이벤트 발생 시 실행할 함수
	- 캡처 여부 : 이벤트를 캡처링하는지의 여부를 지정 (옵션, 기본 값은 false(버블링))
- 콜백함수 연결 시 자동으로 'event' 라는 객체가 넘겨짐



6-3 event 객체

event 객체
= 이벤트가 발생하면 자동으로 만들어지는 객체
- 이벤트 이름이나 발생 위치, 발생한 시간 등 이벤트와 관련된 여러 정보를 가지고 있음
- event 객체의 메서드
	- preventDefault() : (취소할 수 있을 경우) 기본 동작을 취소함
- event 객체의 프로퍼티는 다양함 (*참고)
- event를 처리하는 (콜백)함수 안에서 event 객체를 사용하려면, 인수에 'event(또는 e)'를 넣어줘야 함

키보드 키를 눌렀을 때 키값 알아내기
- 키보드와 관련된 프로퍼티
	- event.code : 키 코드
	- event.key : 키 이름



6-4 이벤트 전파

이벤트 전파(event propagation)
= 웹 요소에서 이벤트가 발생했을 때 해당 요소에서만 이벤트가 처리되는 것이 아니라
	해당 요소를 감싸고 있는 부모 요소, 그리고 그 요소의 부모 요소에서도 똑같이 이벤트가 처리되는 것
- { 버블링, 캡처링 }

이벤트 버블링
= 특정 요소에서 이벤트가 발생했을 때 그 이벤트가 해당 요소뿐만 아니라 그 요소의 부모 요소,
	부모 요소의 부모 요소에도 똑같이 발생한 것으로 간주하는 것

event.target 과 event.currentTarget
= event 객체의 프로퍼티 중에서 이벤트 전파와 관련이 있는 프로퍼티
- event.target : 처음 이벤트가 발생한 대상
- event.currentTarget : 이벤트가 전파되면서 현재 이벤트 처리기가 실행되는 대상

이벤트 캡처링(event capturing)
- 웹 브라우저에서는 기본적으로 '이벤트 버블링' 전파 방식을 사용
= 웹 요소에서 이벤트가 발생하면 일단 최상위 요소에서 시작해서 이벤트가 발생한 요소까지 차례대로 이벤트가 전파되는 방식
- 버블링은 아래 -> 위(자식 -> 부모) / 캡처링은 위 -> 아래(부모 -> 자식)



//////////

모달 박스(modal box)
= 화면에 내용이 팝업 되면서 기타 내용은 블러 처리되어 팝업 된 내용에만 집중할 수 있게 해 주는 창
- 모달박스 안에 들어갈 내용이 웹 문서 안에 들어있어야 함

캐러셀(carousel)
= 이미지나 콘텐츠를 슬라이드 쇼처럼 보여 주는 요소

콘텍스트 메뉴(context menu)
= 우클릭 시 나오는 바로가기 메뉴