1-4 간단한 스크립트 부터 시작하기

인라인 스크립트
= HTML 태그 안에 직접 작성하는 js
- 간단한 명령(팝업 창을 열고 닫거나, 알람 메시지를 표시)을 처리할 경우 자주 사용

내부 스크립트
= 웹 문서에서 <script> 태그와 </script> 태그를 사용해 js 소스만 모아 두는 스크립트
- <script> 태그는 웹 문서에서 모든 곳에 위치할 수 있음, 삽입된 위치에서 바로 js 실행
- 한 문서 안에 여러 개의 <script> 태그를 사용 가능
- 대부분 웹 문서 내용이 끝나는 </body> 태그 직전에 js 소스를 삽입
	- <script> 소스는 웹 요소를 모두 로딩한 후에 삽입되어야 함

외부 스크립트
= <script src="파일.js"></script>
- 외부 스크립트 파일 작성 시 <script> 태그와 </script> 태그 없이 js 소스만 작성
- defer 속성 : 무조건 문서를 다 가져온 후에 스크립트 소스를 실행하도록 지정
	- 외부 스크립트 파일을 링크하는 경우에만 사용 가능
	= <script defer src="파일.js"></script>
- 스크립트 파일은 스크립트 파일끼리 별도의 폴더에 저장하는 것이 좋음



2-1 프로그램에서 입력받고 출력하는 방법

alert() 함수
= 알람 창을 표시
- 소괄호 안에 메시지를 입력하거나 변수를 사용하면, 알람 창에 텍스트나 변숫값을 표시

confirm() 함수
= 내용을 보여주고, [확인] 버튼과 [취소] 버튼을 통해 동작하는 확인 창을 표시
- [확인] 버튼을 클릭 시 true 반환 값
- [취소] 버튼을 클릭 시 false 반환 값

prompt() 함수
= 사용자가 간단한 값을 입력할 수 있는 프롬프트 창
= prompt(내용, 기본값);
- 사용자가 입력한 내용이 반환 값 (문자열)
- [취소] 버튼을 클릭 시 null 반환 값

console.log() 함수
= 콘솔 창에 간단하게 텍스트를 보여주는 함수
- 연결 연산자(+) 또는 템플릿 리터럴 사용 가능

document.write() 함수
= 소괄호 안의 내용을 웹 브라우저 창에 표시
- 연결 연산자(+) 또는 템플릿 리터럴 사용 가능



2-2 프로그램과 친해지려면 변수부터 익히자

변수(variable)
= 프로그램 안에서 처리해야 할 값들을 담아놓는 곳
- 변수 이름 지정
	- 숫자로 시작할 수 없음
	- 대소문자 구별 (서로 다른 이름)
	- 언더바(_) 가능
	- 하이픈(-) 불가능

변수 선언
= 변수의 이름을 지정하는 것
- let : 값이 바뀌는 변수, 재선언 불가능, 재할당 가능
- const : 값이 바뀌지 않는 변수 (= 상수), 재선언과 재할당 불가능

var와 호이스팅
- 호이스팅 : var로 선언된 변수가 뒤늦게 선언하더라도, 소스코드 해석 시 먼저 선언된 후 사용됨
	- var 변수 보다는 let 또는 const 변수를 사용 권장

예약어의 특징
- var : 재선언 가능 / 재할당 가능 / 선언하지 않고 사용할 경우, 오류 없음(호이스팅 발생)
- let : 재선언 불가 / 재할당 가능 / 선언하지 않고 사용할 경우, 오류 발생
- const : 재선언 불가 / 재할당 불가 / 선언하지 않고 사용할 경우, 오류 발생



2-3 컴퓨터가 세상을 보는 방법, 자료형

자료형(data type)
= 프로그램에서 처리할 자료의 형태
- 원시 유형(primitive type) : 하나의 변수에 하나의 값만 저장하는 자료형
	- { 숫자, 문자열, 논리형, undefined, null, symbol }
- 객체(object) : 하나의 변수에 여러 개의 값을 가지고 있는 자료형

typeof() 함수
= typeof(값 또는 변수)
= 해당 변수가 어떤 자료형인지 알려주는 함수

숫자형(number)
- 정수형과 실수형을 따로 구분하지 않음

문자열(string)
= 작은따옴표(')나 큰따옴표(")로 묶은 데이터
- 빈 문자열 : 따옴표만 있고 내용이 없는 문자열
- 특수기호 사용 시 백슬래시(\)와 함께 사용
- 템플릿 리터럴 : 문자열과 변수, 식을 섞어서 하나의 문자열을 만드는 표현 형식
	- 백팃(``)을 사용해 문자열을 만듦
	- 변수나 식은 ${ }로 묶고 태그나 띄어쓰기, 이스케이프 문자를 그대로 표시할 수 있음

논리형(boolean)
= true 또는 false 값을 표현하기 위한 데이터 유형

undefined
= 값이 할당되지 않았을 때 변수의 초깃값
- 값이면서 동시에 자료형

null
= 값이 없거나 유효하지 않은 값
- 값이면서 동시에 자료형
- 사용자가 직접 할당이 가능

객체(object)
= 하나의 변수에 여러 개의 값을 가지고 있는 자료형
- 중괄호( {} ) 안에 모든 정보를 담는데, 키(key)와 값(value)으로 하나 또는 여러 개의 쌍을 만들 수 있음
- 객체 안에서는 여러 개의 '키:값'쌍을 쉼표(,)로 구분
= 객체명 = { 키 : 값, 키 : 값, ... }
- 객체의 값에 접근하기
	= 객체명.키 이름 <- 주로 사용
	= 객체명["키 이름"]
- 배열(array)
	- 대괄호 ( [] )로 묶고 그 안에 값을 나열하는데, 각 값은 쉼표(,)로 구분
	- 대괄호 안에 아무 값이 없으면 '빈 배열'이라고 하는데, 이것 또한 배열
	= 배열명 = [값, 값, ...]
	- 0부터 숫자와 함께 배열의 값이 나열되고, length라는 식별자의 개수가 표시됨
	- 인덱스(index) : 배열 값의 왼쪽에 있는 숫자(방 번호) / 0부터 시작
		ex ) season 변수의 세 번째 값 = season[2]
	- 배열에 모두 몇 개의 값이 있는지 알고 싶으면 length 프로퍼티를 사용
		ex ) season.length



2-4 js의 장점이자 단점, 자료형 변환

js 자료형의 특징
- js는 변수를 선언할 때 따로 자료형을 지정하지 않음 (= 느슨한 자료형 체크)

자동 형 변환
= js에서는 연산을 위해 자료형이 자동으로 형 변환될 수 있음
	ex ) +기호의 앞이나 뒤에 문자열이 있으면, +기호는 연결 연산자가 됨
	ex ) -기호는 앞이나 뒤에 문자열이 있으면, 문자열을 숫자로 바꿔서 인식함

직접 숫자형으로 변환하기
- Number() 함수 : 소괄호 안에 값을 넣어 주면 숫자로 변환
- parseInt() 함수 : 소괄호 안의 값을 정수로 변환
- parseFloat() 함수 : 소괄호 안의 값을 실수로 변환

문자열로 변환하기
- toString() 함수 : null, undefined 자료형을 제외한 나머지 자료형을 문자열 데이터로 변환
	= 값.toString();
	- 기본값은 10진수 / 2진수나 8진수 형태의 문자열로 바꾸려면 소괄호 안에 2나 8을 지정
- String() 함수 : null, indefined 자료형까지 모두 포함해서 문자열로 변환
	= String(값);

논리형으로 변환하기
- Boolean() 함수 : 다른 유형의 데이터를 논리형 데이터로 변환
	= Boolean(값);

//////////

toFixed() 함수
= 실수의 n 번째 소수점 자릿수까지 반올림
= 값.toFixed(n);