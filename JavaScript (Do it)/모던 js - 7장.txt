7-1 DOM 트리와 노드 리스트

DOM 트리와 노드
- DOM에는 단순히 태그에 해당하는 요소 노드뿐만 아니라 여러 종류의 노드가 있음
- 노드 : DOM 트리에서 가지가 갈라져 나가는 부분
- DOM 트리의 시작 부분(= html 노드)은 '루트 노드'
- 노드를 구성하는 원칙
	- 모든 HTML 태그는 '요소 노드'
	- HTML 태그에서 사용하는 텍스트 내용은 자식 노드인 '텍스트 노드'
	- HTML 태그에 있는 속성은 모두 자식 노드인 '속성 노드'
	- 주석들은 '주석 노드'
ex ) 텍스트 내용이 있는 노드 추가하기
	- 새로운 추가할 노드에 텍스트 내용만 있다면
	1.  텍스트 노드를 만듦 (텍스트 내용이 있는 노드)
	2.  요소 노드를 만듦 (예를 들어, p 요소 노드)
	3.  텍스트 노드를 요소 노드에 연결 (p 요소 노드에 텍스트 내용 연결)
	4.  원하는 영역에 추가

노드 리스트(node list)
= DOM에 접근할 때 querySelectorAll()메서드 를 사용하면 여러 개의 노드를 한꺼번에 가져올 수 있는데,
	이렇게 가져온 다양한 노드 정보를 저장한 것
- 배열과 비슷하게 생겼고 배열처럼 사용할 수 있지만, 배열은 아님
- DOM에서 새로운 노드를 만들어 추가하거나 삭제할 때는 노드리스트를 사용해야 함



7-2 웹 문서에 새로운 노드 추가하기

- 처음에 화면에 보이지 않다가 click 같은 이벤트가 발생했을 때, 화면에 특정한 내용이 나타나게 하려면,
	기존에 없던 새로운 요소를 웹 문서에 추가해야 함
- DOM 트리에 새로운 노드를 추가하면 됨

내용이 있는 텍스트 노드 추가하기
1.  요소 노드 만들기 - createElement() 메서드
	= 어떤 태그를 사용할지 태그를 만들어 주는 것
	= 기본형 : document.createElement("요소명");
		ex ) let newP = document.createElement("p");  // <p> ... </p>
	- 새로운 노드만 만든 것일 뿐, 아직 웹 문서에 새로운 노드를 추가한 것은 아님
2.  텍스트 노드 만들기 - createTextNode() 메서드
	- 새로운 요소 노드를 만들었다면 내용을 담고 있는 텍스트 노드를 만들어서 요소 노드의 자식 노드로 연결해야 함
	= 기본형 : document.createTextNode("텍스트");
		ex ) let textNode = document.createTextNode("Typescript")  // "Typescript"
		- 새로운 p 요소에 들어갈 내용을 텍스트 노드로 만들고, textNode라는 변수에 저장
3.  자식 노드 연결하기 - appendChild() 메서드
	= 텍스트 노드를 요소 노드의 자식 노드로 추가할 때 사용하는 메서드
	- 요소 노드와 텍스트 노드를 서로 부모 노드와 자식 노드로 연결
	- 연결 시 기존의 자식 노드가 있을 경우, 자식 노드 중 맨 끝에 추가됨
	= 기본형 : 부모노드.appendChild(자식노드);
		ex ) newP.appendChild(textNode);  // 텍스트 노드를 p 요소에 연결
	- 웹 문서에 보이게 하려면, 요소 노드를 웹 문서의 태그에 연결시켜야 함
		ex ) document.body.appendChild(newP);  // p 요소 노드를 body 노드의 자식 노드로 추가

속성값이 있는 노드 추가하기
- 속성이 필요한 요소를 추가할 때, 속성 노드도 함께 만들어서 자식 노드로 연결해야 함
	ex ) 웹 문서에 이미지(<img>)를 추가할 것
1.  요소 노드 만들기 - createElement() 메서드
	ex ) let newImg = document.createElement("img");  // 새로운 이미지 요소 노드를 생성
2.  속성 노드 만들기 - createAttribute() 메서드
	- createAttribute() 메서드를 사용해 속성 노드를 만들고, 속성의 값은 value 프로퍼티를 사용해서 지정
	= document.createAttribute(속성명);
	   노드명.value = 속성값;
		ex ) let srcNode = document.createAttribute("src");
		     srcNode.value = "images/wall.jpg";
3.  속성 노드 연결하기 - setAttributeNode() 메서드
	= 속성 노드가 요소 노드의 자식 노드로 연결할 때 사용
	- setAttribute() 메서드와 다르므로 정확하게 구별할 것
	= 노드명.setAttributeNode(속성노드);
		ex ) newImg.setAttributeNode(srcNode);
	- 추가하려는 속성이 이미 요소 노드에 있으면, 기존 속성 노드를 새 속성 노드로 대체
4.  자식 노드 연결하기 - appendChild() 메서드
	= 웹 문서에 보이게 하려면, 요소 노드를 웹 문서의 태그에 연결시켜야 함
		ex ) document.body.appendChild(newImg);

기존 노드의 앞에 새 요소 추가하기 - insertBefore() 메서드
= 특정 요소를 기준으로 그 앞에 새로운 요소를 추가
= 기본형 : insertBefore(새 노드, 기존 노드);
	ex ) document.body.insertBefore(tsNode, basisNode);



7-3 노드 삭제하기

노드 삭제하기 - remove 메서드
= 현재 노드를 삭제 (IE 미 고려)
= 기본형 : 요소.remove();

removeChild() 메서드 사용하기
= 현재 노드를 기준으로 자식 노드를 삭제 (자신을 삭제하는 것이 아님)
- 이 메서드를 사용하려면, 먼저 부모 노드를 찾은 후 자식 노드를 삭제해야 함
1.  부모 노드를 찾는 parentNode 프로퍼티
	= 현재 노드의 부모 노드에 접근해서 부모 노드의 요소 노드를 반환하는 프로퍼티
	= 기본형 : 노드.parentNode;
	- 현재 노드의 자식 노드를 알려면 'childNodes 프로퍼티'를 사용
2.  자식 노드를 제거하는 removeChild() 메서드
	= 기본형 : 부모노드.removeChild(자식노드);
	- 여러 개의 요소를 삭제할 시 유용함 (코드를 여러 번 쓰지 않아도 됨)
3.  이벤트 리스너에서 함수 안에 있는 this
	= 이벤트 리스너에서 function() { ... }에 this를 사용하면, this는 이벤트가 발생한 노드를 가리킴
		ex ) 첫 번째 항목을 클릭했다면 첫 번째 li 요소가 this가 됨
	- 이벤트 리스너에서 화살표 함수를 사용할 경우, this는 최상위 객체 window를 가리킴
		- 화살표 함수를 사용할 경우, 클릭한 요소를 찾을 때 this를 사용할 수 없음
	** 이벤트가 발생한 요소를 this로 사용하려면, 화살표 함수를 사용하지 말 것
		- function () { ... } (익명 함수)을 사용할 것
ex )	const items = document.querySelectorAll("li");
	for (let item of items) {  // items 안에 있는 개별적인 항목들을 'item' 변수로 선언
	    item.addEventListener("click", function () {
	        this.remove();
	    });
	}
- IE 미 고려 시 'this.remove();' 사용
- IE 고려 시 'this.parentNode.removeChild(this);' 사용