10-1 문자열에 접근하기

원시 유형과 객체
= 원시 유형 : 단순히 값만 가지고 있을 경우
= 객체 : 프로퍼티와 메서드를 가지고 있을 경우
- js에서는 원시 유형이어도 프로퍼티와 메서드를 사용할 수 있음
	- 래퍼 객체(wrapper object) : 원시 유형의 별도로 만들어진 프로토타입 객체
	- 오토박싱(autoboxing) : 필요할 때만 임시로 객체로 바꿔 사용하고, 사용이 끝나면 다시 원시유형으로 돌아옴

문자열의 길이 - length 프로퍼티
= 문자열의 길이를 찾을 때는 배열에서처럼 length 프로퍼티를 사용

문자열에서 문자의 위치 활용하기 - charAt(), indexOf() 메서드
1.. 특정 위치의 글자 가져오기 - charAt() 메서드
= 기본형 : 문자열.charAt(위치)
- ES6 부터는 별도의 메서드 없이, 배열처럼 대괄호([])를 사용할 수 있음
	= 문자열[위치]
- 위치는 인덱스로 표시되는데, 인덱스는 0부터 시작
2.. 부분 문자열 위치 가져오기 - indexOf() 메서드
= 기본형 : indexOf(문자열) 또는 indexOf(문자열, 위치)
	- 위치 : 문자열을 찾기 시작할 위치
	- '위치' 값을 생략할 경우, 문자열이 나타난 첫 번째 위치를 알려줌
	- 반환값은 해당 문자열이 나타난 첫 번째 위치
		- 만약 찾는 문자열이 없으면 '-1'을 반환
- 두 번째 나오는 문자열의 위치를 알고 싶으면, 먼저 첫 번째 문자열의 위치 값을 알아낸 후
	해당 위치 값 보다 큰 값을 넣어서 확인
	ex ) // str1 = "Good morning, everyone. Beautiful morning."
	     firstIndex = str1.indexOf("morning");  // 5. 첫 번째 "morning"의 위치
	     str1.indexOf("morning", firstIndex+1);  // 34. 두 번째 "morning"의 위치
= ES6 부터는 특정 문자열이 포함되어 있는지 확인하기 위해 'includes()' 메서드를 사용

문자열에 어떤 문자가 있는지 확인하기 - startsWith(), endsWith(), includes() 메서드
- ES6 이전에는 'indexOf()' 메서드를 응용해서 특정 문자나 문자열이 있는지 확인했음
- ES6 부터는 용도에 맞는 메서드들이 추가됨
1.. 문자열의 시작 체크하기 - startsWith() 메서드
= 문자열이 특정 문자나 문자열로 시작하는지 확인할 때 사용
= 기본형 : 문자열.startsWith(문자 또는 문자열)
	- 불린 값(true/false)으로 반환됨
	- 영문자의 대소문자 구별
- '위치' 값을 함께 지정하면, 특정 문자나 문자열이 해당 위치부터 시작하는지 확인 가능
	= 기본형 : 문자열.startsWith(문자 또는 문자열, 위치)
2.. 문자열의 끝 체크하기 - endsWith() 메서드
= 문자열이 특정 문자나 문자열로 시작하는지 확인할 때 사용
= 기본형 : 문자열.endsWith(문자 또는 문자열)
	- 불린 값(true/false)으로 반환됨
	- 영문자의 대소문자 구별
- '길이' 값을 함께 지정하면, 특정 문자나 문자열이 해당 길이에 끝나는지 확인 가능
	= 기본형 : 문자열.endsWith(문자 또는 문자열, 길이)
3.. 문자열이 포함되었는지 체크하기 - includes() 메서드
= 문자열에 특정 문자나 문자열이 포함되었는지 확인할 때 사용
= 기본형 : 문자열.includes(문자열)
	- 불린 값(true/false)으로 반환됨
	- 영문자의 대소문자 구별



10-2 문자열 메서드 활용하기

문자열에서 공백 제거하기 - trim(), trimStart(), trimEnd() 메서드
- 공백 : 'spacebar' 또는 'Tab'을 누르거나, 줄을 바꾸기 위해 사용한 이스케이프 문자(\n, \r) 등
= 문자열.trim() : 문자열의 앞뒤 공백을 제거
= 문자열.trimStart() : 문자열의 앞쪽 공백을 제거
= 문자열.trimEnd() : 문자열의 뒤쪽 공백을 제거

문자열의 대소문자 바꾸기 - toUpperCase(), toLowerCase() 메서드
= 문자열.toUpperCase() : 문자열을 모두 대문자로 변환
= 문자열.toLowerCase() : 문자열을 모두 소문자로 변환

부분 문자열 추출하기 - substring(), slice() 메서드
- 문자열 중에서 특정 문자열만 추출할 때 사용
1.. substring() 메서드
= 시작 위치부터 끝 위치의 직전까지 추출해서 반환
	- 끝 위치의 직전까지 추출하고, 끝 위치는 포함되지 않는다에 주의
= 기본형 : 문자열.substring(시작 위치, 끝 위치)
	- 끝 위치를 지정하지 않으면, 시작 위치부터 문자열 끝까지 추출해서 반환
	- 음수 사용 시 자동으로 0으로 바꿔서 실행됨
2.. slice() 메서드
= 'substring()' 메서드와 거의 비슷하게 사용 가능
= 기본형 : 문자열.slice(시작 위치, 끝 위치)
- 'substring()' 메서드와 달리 음수 사용 가능
	- 음수로 지정하면 문자열의 끝에서부터 위치를 찾으므로, 문자열을 뒤에서부터 자를 경우에 편리

구분자에 따라 문자 쪼개기 - split() 메서드
= 문자열에서 구분자를 기준으로 문자열을 쪼개줌
- 'split()' 메서드는 새로운 배열을 반환함
	- 문자열을 단어별로 구분하려면 구분자를 공백(" ")으로 지정
	- 문자열을 각각의 글자로 구분하려면 구분자를 큰따옴표("")로 지정



10-3 정규 표현식으로 문자열 다루기

정규 표현식 작성하기
= 정규 표현식(Regular Expression) : 특정 패턴(규칙)을 사용해 문자열을 표현하는 언어
- js에서 정규 표현식을 만들 때는 RegExp 객체를 사용할 수 있고, 간단히 슬래시(/)를 사용해 표현식으로 사용할 수도 있음
	ex ) let regexp = /\d{3}/ 또는 let regexp = new RegExp(/\d{3}/)
= 기본형 : 패턴[플래그]
	- 정규 표현식은 '패턴'과 '플래그'로 구성되는데, 플래그는 옵션이어서 필요한 경우에만 사용
	- '패턴'과 '플래그' 사이에는 공백이 없음

정규 표현식과 메서드
= RegExp 객체에서 제공하는 메서드
	- 정규식.test(문자열) : 정규 표현식에 일치하는 부분 문자열이 있으면 true를, 없으면 false를 반환
	- 정규식.exec(문자열) : 정규 표현식에 일치하는 부분 문자열이 있으면 결괏값을 배열 형태로, 없으면 null을 반환
= 문자열 메서드 중에서 정규 표현식과 함께 사용할 수 있는 메서드
	- match(정규식) : 문자열에서 정규 표현식에 일치하는 부분을 찾음
	- replace(정규식, 바꿀 문자열) : 문자열에서 정규 표현식에 맞는 부분 문자열을 찾아서 새로운 문자열로 바꿈

정규 표현식의 플래그
= 플래그는 문자열을 검색할 때 사용하는 옵션과 비슷함
- i : 영문자의 대소문자를 구별하지 않고 검색
- g : 패턴과 일치하는 것을 모두 찾음. g 패턴이 없으면 일치하는 패턴 중 첫 번째 패턴만 반환
- m : 문자열의 행이 바뀌어도 검색
	ex ) let str = "ES2015 is powerful!";
	     /es/.test(str);  // false
	     /es/i.test(str);  // true

문자 클래스 사용하기
= 문자 클래스 : 정규 표현식을 사용하면 문자열의 특정 부분이 숫자인지 문자인지 체크 가능
	- 숫자와 공백, 단어 등을 체크 가능
- 숫자(digit) 클래스
	- \d : 0~9 사이의 숫자
	- \D : 숫자가 아닌 모든 문자
- 공백(space) 클래스
	- \s : 공백, 탭(\t), 줄 바꿈(\n) 등
	- \S : 공백이 아닌 모든 문자
- 단어(word) 클래스
	- \w : 단어에 들어가는 문자. 숫자와 언더바(밑줄) 포함
	- \W : 단어에 들어가지 않는 모든 문자
ex ) let str = "ES2015 is powerful!";
     str.match(/ES\d/);  // ES라는 문자 뒤에 오는 하나의 숫자만 찾은 후 배열 형태로 반환
     str.match(/ES\d\d\d\d/);  // ES라는 문자 뒤에 오는 숫자 4개까지 문자열로 가져올 수 있음

문자열의 시작과 끝 체크하기
= 앵커 기호(anchor sign) : { ^(캐럿(carrot)), $ }
	- ^ : 정규 표현식에서 문자열의 시작을 나타냄
	- $ : 정규 표현식에서 문자열의 끝을 나타냄
		ex ) let hello = "Hello, everyone.";
		      /^H/.test(hello);  // true. 문자열이 H로 시작하는지 체크
		ex ) /one.$/.test(hello);  // true. 문자열이 one.으로 끝나는지 체크
	- ^기호가 [] 안에 있을 경우에는 NOT의 의미가 된다는 것에 주의
		ex ) "ES2015".match(/[^0-9]/g);  // ["E", "S"]

반복 검색하기
- 중괄호({ })는 반복해서 체크하라고 알려주는 기호인데, 반복 횟수를 지정하거나 최소 반복 횟수, 최대 반복 횟수를 지정할 수 있음
	- 패턴{n} : 패턴이 n번 반복되는 것을 찾음
	- 패턴{n,} : 패턴이 최소 n번 이상 반복되는 것을 찾음
	- 패턴{m,n} : 패턴이 최소 m번 이상, 최대 n번 이하로 반복되는 것을 찾음
		- 쉼표(,) 다음에 공백이 없다는 점에 주의
	ex ) let str = "Oooops";
	      str.match(/o{2}/);  // 'oo'. o가 2번 반복되는 것을 찾아 배열로 반환
	      str.match(/o{2,}/);  // 'ooo'. o가 2번 이상 반복되는 것을 찾아 배열로 반환
	      str.match(/o{2,4}/i);  // 'Oooo'. 대소문자를 구별하지 않고 o가 2번 이상, 4번 이하로 반복되는 것을 찾아 배열로 반환

OR 검색하기
= 2개 이상의 패턴을 함께 찾으려면 OR로 연결해야 하는데, 정규 표현식에서는 | 기호를 사용

조건에 일치하는 문자열 찾기
= 정규 표현식에서는 특정한 의미를 갖는 메타(meta) 문자를 이용해서 필요한 조건을 표현
- 메타 문자를 메타 문자가 아닌 원래 문자로 사용하려면 백슬래시(\) 다음에 문자를 표시
	- [ ] : 식의 시작과 끝
	- ^x : x로 시작하는 문자열. 대괄호([])안에 ^가 있으면 NOT의 의미가 됨
	- x$ : x로 끝나는 문자열
	- x+ : x가 한 번 이상 반복되는 문자열
	- x? : x가 0번 또는 1번 있는 문자열
	- x* : x가 0번 이상 반복되는 문자열
	- . : 문자 하나



10-4 문자열과 배열 변환하기

- 문자열은 그 안의 문자만 따로 수정하는 메서드가 없음
- 문자열의 내용을 역순으로 또는 알파벳 순으로 배치해야 한다면, 문자열에 있는 문자를 따로 분리해 배열 형태로 저장한 후 처리해야 함

문자열을 문자 배열로 변환하기 - 전개 연산자와 Array.from() 메서드
- 배열에는 사용할 수 있는 메서드가 많아, 문자열을 다룰 때는 배열로 변환한 후 배열 메서드를 사용하고
	결과 배열을 그대로 사용하거나 필요하다면 다시 문자열로 변환해야 함
1.. split() 메서드 사용하기
	ex ) array2 = str.split("")
2.. 전개 연산자(...) 사용하기
	- ES6부터 도입
	ex ) array3 = [...str]
3.. Array.from() 메서드 사용하기
	= Array 객체의 from() 메서드를 사용하는 방법
	- 괄호 안에 있는 문자열을 배열로 바꿔 줌
	- ES6부터 도입
	= 기본형 : Array.from(문자열)

문자열 배열을 다시 문자열로 변환하기 - join() 메서드
- 프로그램에서 문자를 배열로 변환해서 작업하면 결괏값을 배열로 반환 됨
= Array 객체의 join() 메서드 : 배열에 있는 모든 요소를 연결해서 하나의 문자열로 변환
	= 기본형 : 배열.join(구분자)
		- 구분자를 따로 사용하지 않으면, 배열에 있는 각 문자를 계속 연결해서 하나의 문자열로 만듦
	ex ) str6 = array4.join("");  // "Hello everyone"



10-5 똑똑하게 배열 사용하기

- 여러 개의 객체를 한꺼번에 묶은 후 일부분을 삭제하거나 순서를 바꾸는 등의 작업은 객체의 메서드로 해결 불가
- 순서가 필요한 작업을 하려면, 배열을 이용해야 함

새로운 배열 만들기
1.. 빈 배열을 만들고 값 할당하기
- 빈 배열을 만든 후, 필요할 때마다 인덱스를 사용해서 배열에 값을 할당
	ex ) let season = [];
	     season[0] = "spring";
	     season[1] = "summer";
	     season;  // ["spring", "summer"]
2.. 리터럴 표기법으로 만들기
- 초깃값이 있는 배열은 리터럴 표기법을 사용해서, 변수 선언과 동시에 값을 지정 가능
	ex ) let pets = ["dog", "cat", "parrot"];
	     pets;  // ["dog", "cat", "parrot"]
3.. Array 객체의 인스턴스 만들기
	ex ) let fruits = new Array("사과", "복숭아", "포도");
	     fruits;  // ["사과", "복숭아", "포도"]

배열 값 수정하기와 추가하기
- 인덱스를 사용해서 이미 값이 있는 위치에 값을 다시 할당하면 기존 값은 지워짐
- 중간에 인덱스를 건너뛰고 값을 할당 가능
	- 비어있는 인덱스 부분은 empty로 표시되고, 값은 undefined
	- 배열의 길이는 마지막 인덱스를 기준

배열 요소 순회하기 - forEach() 메서드
- 배열은 여러 개의 값을 가지고 있는 자료형이므로, 반복문을 사용해서 각 요소의 값에 접근 가능
- 일반적인 for 문도 가능하지만, 배열에서 사용하는 순회 메서드인 forEach() 메서드를 사용하면 편리함
1.. 일반적인 for 문
- 배열의 length 프로퍼티를 사용
2.. 인수가 1개인 forEach() 문
= 기본형 : 배열.forEach(값)  // 요소의 각 값을 이용해 함수를 실행
	- 주로 배열명은 복수로, 각 요소의 이름은 단수로 사용
ex ) let animals = ["lion", "bear", "bird"];
     animals.forEach( (animal) => {
	console.log(animal);
     });
	// lion
	// bear
	// bird
3.. 인수가 2개인 forEach() 문
= 기본형 : 배열.forEach(값, 인덱스)  // 요소의 각 값과 인덱스를 이용해 함수를 실행
	- 인덱스까지 같이 사용
ex ) animals.forEach( (animal, index) => {
	console.log(`animals[${index}] : ${animal}`);
     });
	// animals[0] : lion
	// animals[1] : bear
	// animals[2] : bird
4.. 인수가 3개인 forEach() 문
= 기본형 : 배열.forEach(값, 인덱스, 배열)  // 요소의 각 값과 인덱스, 배열을 이용해 함수를 실행
	- 세 번째 인수는 배열 자체가 됨
ex ) animals.forEach( (animal, index, array) => {
	console.log(`[${array}][${index}] : ${animal}`);
     });
	// [lion, bear, bird][0] : lion
	// [lion, bear, bird][1] : bear
	// [lion, bear, bird][2] : bird
** 일반적인 for 문은 특정 조건을 만족할 때 break 문이나 continue 문을 사용해 순회를 멈출 수 있음
** 하지만, forEach 문은 배열의 처음부터 끝까지 모두 순회해야 끝남



10-6 배열의 다양한 메서드 살펴보기

배열 합치기 - concat() 메서드와 전개 연산자
- 기존 배열에 또 다른 배열이나 값을 합쳐서 새로운 배열을 만들 수 있음
- ES5까지는 concat() 메서드를 사용했지만, ES6부터는 전개 연산자(...)를 많이 사용함
1.. concat() 메서드
= 기본형 : 배열.concat(배열 또는 값, 배열 또는 값, ...)
2. 전개 연산자(...)
ex ) let cheeseBurger = ["빵", ...vegitable, ...cheese];

배열 요소 정렬하기 - reverse(), sort() 메서드
1.. 역순으로 배치하기 - reverse() 메서드
= 배열 요소의 순서를 거꾸로 바꾸는 메서드 (값의 크기와는 상관 x)
= 기본형 : 배열.reverse()
2.. 크기에 따라 정렬하기 - sort() 메서드
= 값의 크기에 따라 가장 작은 값부터 순서대로 값을 정렬
= 기본형 : 배열.sort()
	- 배열 요소를 문자열로 보고 정렬한다는 것에 주의
- sort() 메서드를 사용해서 숫자를 비교하려면 따로 함수를 정의해야 함
	- sort() 메서드 안에 정렬 방식을 알려주는 함수를 사용
	= 배열.sort(정렬 함수)
	ex ) 두 수를 비교하는 함수
		let values = [5, 20, 3, 11, 4, 15];
		values.sort(function(a,b) {
		    return a - b;
		});  // [3, 4, 5, 11, 15, 20]

배열의 맨 끝에 요소를 추가하고 제거하기 - pop(), push() 메서드
- pop() 메서드와 push() 메서드를 사용하면 원래의 배열이 변경됨
1.. pop() 메서드
	= 배열의 맨 마지막 값을 제거
	= 기본형 : 배열.pop()
2.. push() 메서드
	= 배열의 맨 끝에 값을 추가
	= 배열.push(값)
	- 배열의 크기(length) 값을 반환

배열의 맨 앞에 요소를 추가하고 제거하기 - shift(), unshift() 메서드
- shift() 메서드와 unshift() 메서드를 사용하면 원래의 배열이 변경됨
1.. shift() 메서드
	= 배열의 첫 번째 값을 제거
	= 기본형 : 배열.shift()
2.. unshift() 메서드
	= 배열의 맨 앞에 값을 추가
	= 배열.unshift(값)
	- 배열의 크기(length) 값을 반환

배열의 원하는 위치에 요소를 추가하거나 제거하기 - splice() 메서드
- splice() 메서드는 추출한 요소들을 배열로 만들어서 반환
- 원본 배열은 변경됨
1.. 특정 위치부터 끝까지 요소 제거하기
	= 기본형 : 배열.splice(위치)
	- '위치'부터 끝까지 요소를 삭제
2.. 특정 위치에서 원하는 개수만큼 요소 제거하기
	= 기본형 : 배열.splice(위치, 개수)
	- '위치'에서 '개수'만큼 요소를 삭제
3.. 특정 위치에 요소 추가하기
	= 기본형 : 배열.splice(위치, 개수, 값)
	- '위치'에서 '개수'만큼 요소를 삭제한 후 "값"을 추가
	- '개수'를 '0'으로 지정하면, 0개를 삭제하므로 아무것도 반환하지 않고 추가만 함

원하는 위치에 있는 요소를 추출하기 - slice() 메서드
= 기본형 : 배열.slice(위치)  // '위치'에서부터 끝까지 추출
= 기본형 : 배열.slice(위치1, 위치2)  // '위치1'에서부터 '위치2' 직전까지 추출
- 원본 배열은 변경되지 않음