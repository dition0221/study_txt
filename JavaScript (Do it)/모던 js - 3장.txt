3-1 프로그램 동작을 가리키는 기호, 연산자

연산자(operator)
= 프로그램에서 특정한 동작을 하도록 지시하는 기호

산술 연산자(arithmetic operator)
= 수학적인 계산을 위해 사용하는 연산자
- { +, -, *, /, %, ++, -- }

할당 연산자(assignment operator) (= 대입 연산자)
= 연산자 오른쪽의 실행 결과를 연산자 왼쪽에 할당하는 연산자
- { =, +=, -=, *=, /=, %= }

연결 연산자
= 문자열과 다른 자료형 또는 2개의 문자열을 합해서 하나의 문자열로 만드는 연산자
- 템플릿 리터럴을 사용하는 것이 더 좋음

비교 연산자(comparison operator)
= 2개의 값을 비교해서 true나 false로 결괏값을 반환하는 연산자
- { ==, ===, !=, !==, <, <=, >, >= }
	- ==, != : 비교하는 피연산자의 자료형을 자동으로 변환해서 비교
	- ===, !== : 값뿐만 아니라 데이터 유형까지 비교
- 숫자 뿐만 아니라 문자열끼리도 비교 가능 (ASCII 코드를 통해)

논리 연산자(logical operator) (= 불리언 연산자)
= true와 false를 피연산자로 하는 연산자
- { !, &&, || }



3-2 프로그램 흐름을 자유롭게 조절하는 조건문

if 문, if...else 문
*	if (조건1) {
	    조건1이 true일 때 실행할 명령
	} else if (조건2) {
	    조건2가 true일 때 실행할 명령
	} else {
	    어떤 조건에도 맞지 않을 때 실행할 명령
	}

삼항 조건 연산자
*	(조건) ? true일 때 실행할 명령 : false일 때 실행할 명령
= 물음표(?)와 콜론(:)을 사용해서 조건과 실행할 명령을 지정

switch 문
*	switch (조건 변수) {
	    case 값 : 문장;
	        break;
	    case 값 : 문장;
	        break;
	    default : 문장;
	}



3-3 같은 동작을 손쉽게 반복하는 반복문

for 문
*	for (초깃값; 조건; 증가식) { ... }

forEach 문
= 프로그램 중에서 배열의 길이가 바뀌어 정확하게 배열의 크기를 알 수 없을 때, 또는 배열의 요소를 가져와서 함수를 실행해야 할 때 편리하게 사용 가능
*	배열명.forEach(콜백 함수) { ... }
		- 콜백 함수 : 다른 함수의 인수로 사용할 수 있는 함수
ex )	students.forEach(function(student) {
	    document.write(`${student}. `)
	});

for...in 문
= 반복해서 객체의 값을 가져와서 처리할 수 있게 해줌 (배열도 객체라서 사용 가능)
- 객체의 키만 가져올 수 있으므로, 해당 키의 값에 접근하려면 대괄호( [] )를 사용
*	for (key in 객체명) {
	    실행할 명령
	}

for...of 문
= 문자열이나 배열과 같은 반복 가능(literable) 자료에서 사용하는 반복문

while 문
= 조건이 true인 동안 문장을 반복
*	while (조건) {
	    실행할 명령
	}

do...while 문
= 일단 문장을 한 번 실행한 후 조건을 체크
- 조건이 맨 뒤에 붙음
- 조건이 false라고 해도 일단 문장이 최소한 한 번은 실행됨
*	do {
	    실행할 명령
	} while (조건)

break 문
= 반복문 탈출

continue 문
= 현재 반복 과정을 한 차례 건너뜀