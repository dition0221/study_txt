10-1 객체란?

객체(object)
= 객체 타입(object/reference type)은 다양한 타입의 값(원시 값 또는 다른 객체)을
	하나의 단위로 구성한 복합적인 자료구조(data structure)
- 원시 값은 변경 불가능한 값이지만, 객체는 변경 가능한 값
= 객체는 0개 이상의 프로퍼티로 구성된 집합이며, 프로퍼티는 키(key)와 값(value)으로 구성됨
- js에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있음
	- 프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드(method)라고 부름
- 객체는 프로퍼티와 메서드로 구성된 집합체
	- 프로퍼티 : 객체의 상태를 나타내는 값(data)
	- 메서드 : 프로퍼티를 참조하고 조작할 수 있는 동작(behavior)



10-2 객체 리터럴에 의한 객체 생성

객체 리터럴
= 객체 생성 방법 중에서 가장 일반적이고 간단한 방법은 객체 리터럴(객체를 생성하기 위한 표기법)을 사용하는 방법
	- 리터럴(literal) : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
- 중괄호({ ... }) 내에 0개 이상의 프로퍼티를 정의함
	- 만약 중괄호 내에 프로퍼티를 정의하지 않으면, 빈 객체가 생성
	ex ) var person = { ... };
- 객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다는 것에 주의
	- 코드 블록의 중괄호 뒤에는 세미콜론(;)을 붙이지 않음
	- 객체 리터럴의 닫는 중괄호 뒤에는 세미콜론(;)을 붙임
- 객체를 생성하기 위해 클래스를 먼저 정의하고 new 연산자와 함께 생성자를 호출할 필요가 없음
- 객체 리터럴 외의 객체 생성 방식은 모두 함수를 사용해 객체를 생성



10-3 프로퍼티

프로퍼티
= 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성됨
- 프로퍼티를 나열할 때는 쉼표(,)로 구분
	- 프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 또는 심벌 값
		- 프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름으로서 식별자 역할을 함
	- 프로퍼티 값 : js에서 사용할 수 있는 모든 값
- 이미 존재하는 프로퍼티 키를 중복 선언하면, 나중에 선언한 프로퍼티가 덮어씀 (에러 발생 x)



10-5 프로퍼티 접근

프로퍼티에 접근 하는 방법
= 마침표 표기법 : 마침표 프로퍼티 접근 연산자(.)를 사용
= 대괄호 표기법 : 대괄호 프로퍼티 접근 연산자([ ... ])를 사용
- 프로퍼티 키가 js에서 사용 가능한 유효한 이름이 아니면 반드시 대괄호 표기법을 사용해야 함



10-6,7,8 프로퍼티 값 갱신, 프로퍼티 동적 생성, 프로퍼티 삭제

- 갱신 : 이미 존재하는 포로퍼티에 값을 할당하면, 프로퍼티 값이 갱신됨
- 동적 생성 : 존재하지 않는 프로퍼티에 값을 할당하면,
	프로퍼티가 동적으로 생성되어 추가되고 프로퍼티 값이 할당됨
- 삭제 : delete 연산자를 사용해 객체의 프로퍼티를 삭제함
	ex ) delete person.age;
	- 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시됨



10-9 ES6에서 추가된 객체 리터럴의 확장 기능

프로퍼티 축약 표현
= 프로퍼티 값으로 변수를 사용하는 경우, 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략 가능
	ex ) let x =1, y = 2;
	     const obj = { x ,y };
	- 이때 프로퍼티 키는 변수 이름으로 자동 생성됨

계산된 프로퍼티 이름
= 문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성 가능
	- 단, 프로퍼티 키로 사용할 표현식을 대괄호 ([...])로 묶어야 함

메서드 축약 표현
= 메서드를 정의 할 때 function 키워드를 생략할 수 있음