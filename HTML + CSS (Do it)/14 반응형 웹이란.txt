14-1 모바일 기기와 웹 디자인

반응형 웹 디자인
= 웹 사이트의 내용을 그대로 유지하면서, 다양한 화면 크기에 맞게 웹 사이트를 표시하는 방법
- 장점
	- 모든 스마트 기기에서 접속 가능
	- 가로 모드에 맞춘 레이아웃 변경 가능
	- 사이트 유지, 관리 용이
- 단점
	- 반응형 웹 기술이 최신 웹 표준인 CSS3의 일부
		- 최신 모던 웹 브라우저에서만 지원됨

뷰포트(viewport)
= 실제 내용이 표시되는 영역
- PC 화면과 모바일 화면의 픽셀 표시 방법이 다르기 때문에, 모바일 화면에서 의도한 대로 표시되지 않음
	- 뷰포트를 지정하면 기기 화면에 맞춰 확대/축소해서 내용 표시

뷰포트 지정하기
= <head> 태그 안에서 <meta> 태그를 이용해 뷰포트 지정
= 기본형 : <meta name="viewport" content="<속성1=값>, <속성2=값>, ...">
- content 속성을 이용해 뷰포트 속성과 속성 값을 지정
	- width : 뷰포트 너비 / { device-width 또는 크기 } / [기본 값] 브라우저 기본 값
	- height : 뷰포트 높이 / { device-height 또는 크기 } / [기본 값] 브라우저 기본 값
	- user-scalable : 확대/축소 가능 여부 / { yes, no } / [기본 값] yes
	- initial-scale : 초기 확대/축소 값 / { 1~10 } / [기본 값] 1
	- minimum-scale : 최소 확대/축소 값 / { 0~10 } / [기본 값] 0.25
	- maximum-scale : 최대 확대/축소 값 / { 0~10 } / [기본 값] 1.6
= 일반적인 사용법 : 뷰포트의 너비를 스마트폰 화면 너비에 맞추고, 초기 화면 배율을 1로 지정
	<meta name="viewport" content="width=device-width, initial-scale=1">



14-2 가변 그리드 레이아웃

그리드 시스템(grid system)
= 화면을 여러 개의 칼럼(column)으로 나누어, 필요할 때마다 칼럼들을 묶어 배치하는 방법
- 화면을 단순하게 만들면서도 규칙적으로 배열하기 때문에 레이아웃을 일관성 있게 유지할 수 있다는 장점
	- 대부분의 사이트들에서 사용
- 화면 너비 값에 따라 '960 그리드 시스템', '1200 그리드 시스템' 등으로 나뉨
- 칼럼 개수에 따라 '12 칼럼 그리드 시스템', '16 칼럼 그리드 시스템', '24 칼럼 그리드 시스템' 등으로 나뉨
- 주로 960 픽셀 12 칼럼의 그리드 시스템을 사용
- 고정 그리드 : 화면 너비를 픽셀로 일정하게 고정하고 레이아웃을 만듦
- 가변 그리드 : 화면 너비를 % 같은 가변 값으로 지정
	- 너비 값이 줄어들면 실제 콘텐츠를 확인하기 불편하므로 가능하면 간결한 디자인을 사용하는 것이 좋음

가변 그리드 레이아웃 만들기
1.  전체를 감싸는 요소의 너비를 %로 변환
	- 화면에 꽉 차게 하고 싶다면 100%, 여유를 두려면 적당히
2.  전체를 감싸는 요소의 너비를 기준으로 각 요소의 너비를 계산
	- (요소의 너비 / 콘텐츠 전체를 감싸는 요소의 너비) * 100 [%]
	- width, padding, margin 등
	- 소수점 이하 숫자가 많다면, 3~4자리까지 표시
	- 너비가 줄거나 늘어나면 높이 값이 계속 바뀌므로, 높이 값은 백분율로 바꾸지 않음



14-3 가변 레이아웃과 가변 요소

가변 글꼴
- 텍스트 크기를 픽셀(px) 단위로 지정하면 크기가 고정되기 때문에, 화면이 작으면 매우 작게 표시됨
- 글자 크기도 유동적으로 바뀌어야 함
- 가장 많이 사용하는 단위는 em과 rem

em 단위
= 부모 요소에서 지정한 폰트의 대문자 M의 너비를 1em으로 지정한 것
= [1em = 16px] -> 글자 크기(em) = ( 글자크기(px) / 16px )
- 실제로 브라우저 창에 표시될 때에는 해당 기기에 맞춘 픽셀 크기로 계산되어 표시됨

rem 단위
- em 단위는 부모 요소의 글꼴을 기준으로 하기 때문에, 중첩된 부모 요소의 글자 크기의 영향을 받음
	- 부모 요소의 크기에 따라 자식 요소의 글자 크기가 바뀜 (em 수치가 계속 달라진다는 단점)
= rem은 처음부터 기본 크기를 지정하기 때문에, 중간에 기본 값이 바뀌지 않음
	- rem에서 r은 루트(root)를 뜻함

가변 이미지(fluid image)
- 웹 문서에 삽입할 때부터 이미지의 크기가 정해져 있어, 화면 너비를 줄일 경우 이미지 일부가 가려짐
= 가변 이미지로 만들면, 창의 너비에 따라 이미지 너비도 조절됨
1.  CSS를 이용한 방법
- 이미지를 감싸고 있는 부모 요소만큼만 커지거나 작아지도록 max-width 속성 값을 100%로 지정
	ex ) max-width : 100%;  height : auto;
- 이미지 파일 크기는 변함이 없어서, 비추
2.  <img> 태그와 srcset 속성
= 화면 너비 값이나 픽셀 밀도에 따라 고해상도의 이미지 파일 지정 가능
= 기본형 : <img src="<이미지>" srcset="<이미지1>[, <이미지2>, <이미지3>, ...]">
	- 화면 너비가 달라질 때 표시할 이미지들을 나열한 것으로, 이미지 파일 경로와 함께 너비 값이나 픽셀 밀도도 함께 표시해야 함
	ex ) <img src="images/pencil.jpg" srcset="images/pencil-hd.jpg 2x", alt="색연필 제품 이미지">
3.  <picture> 태그와 <source> 태그
= 화면 해상도뿐만 아니라 화면 너비에 따라 다른 이미지 파일 표시
- <picture> 태그로 묶은 후 <source> 태그를 사용
	- <source> 태그를 사용하는 방법은 <video> 태그나 <audio> 태그에서 사용하는 방법과 비슷
	- srcset : 이미지 파일의 경로
	- media : srcset에 지정한 이미지를 표시하기 위한 조건
	- type : 파일 유형
	- sizes : 파일의 크기
ex )	<picture>
		<source srcset="images/shop-large.jpg" media="(min-width:1024px)">
		<source srcset="images/shop-medium.jpg" media="(min-width:768px)">
		<source srcset="images/shop-small.jpg" media="(min-width:320px)">
		<img src="images/shop.jpg" alt="fill with coffee" style="width:100%;">
	</picture>

가변 비디오
- CSS를 사용해 max-width 속성을 100%로 지정